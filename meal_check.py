import streamlit as st
import requests

st.set_page_config(page_title="Analyse Repas Sant√©", layout="centered")
st.title("Analyse intelligente de ton repas")

st.markdown("Cette application d√©tecte les aliments √† partir d'une photo et analyse leur impact selon ton r√©gime personnalis√© (sarco√Ødose, prot√©inurie, acide urique, r√©gime LUV).")

# --- 1. Upload de l‚Äôimage et reconnaissance automatique ---
st.header("1. T√©l√©verse une photo de ton repas")

uploaded_file = st.file_uploader("Choisis une image", type=["jpg", "jpeg", "png"])
detected_food = []

if uploaded_file is not None:
    st.image(uploaded_file, caption="Ton repas", use_container_width=True)

    st.write("Analyse automatique en cours...")

    url = "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/food/images/analyze"

    files = {
        'file': (uploaded_file.name, uploaded_file, uploaded_file.type)
    }

    headers = {
        "X-RapidAPI-Key": "TA_CLE_API_ICI",  # üîÅ Remplace ici avec ta cl√© RapidAPI
        "X-RapidAPI-Host": "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com"
    }

    response = requests.post(url, files=files, headers=headers)

    if response.status_code == 200:
        data = response.json()
        if "category" in data:
            aliment_detecte = data["category"]["name"]
            st.success(f"Aliment d√©tect√© : **{aliment_detecte}**")
            detected_food.append(aliment_detecte.capitalize())
        else:
            st.warning("Aucun aliment d√©tect√©.")
    else:
        st.error(f"Erreur {response.status_code} lors de l‚Äôanalyse.")

# --- 2. S√©lection manuelle (modifiable) ---
st.header("2. V√©rifie ou compl√®te les aliments pr√©sents")

liste_aliments = [
    "Tofu", "≈íuf", "Saumon", "Poulet", "Pois chiches", "Lentilles", "Riz basmati", "Quinoa",
    "Pain de seigle", "Pain complet", "Avocat", "Amandes", "Graines de courge", "Brocolis", "Courgettes",
    "√âpinards", "Fenouil", "Carottes", "Betteraves", "Tomates", "Concombres", "Cerises", "Myrtilles",
    "Poire", "Pomme", "Dattes", "Fromage blanc", "Yaourt nature", "Gyoza v√©g√©tarien", "Aubergines"
]

selection = st.multiselect("Quels aliments sont pr√©sents ?", options=liste_aliments, default=detected_food)

# --- 3. Analyse sant√© simplifi√©e ---
st.header("3. R√©sultat de l'analyse")

def analyse(selection):
    score = 0
    remarques = []

    if any(a in {"Tofu", "Pois chiches", "Lentilles"} for a in selection):
        score += 1
        remarques.append("‚úî Bon apport en prot√©ines v√©g√©tales.")

    if any(a in {"≈íuf", "Saumon", "Poulet"} for a in selection):
        score += 0.5
        remarques.append("‚ÑπÔ∏è Prot√©ines animales pr√©sentes (√† mod√©rer en cas de prot√©inurie).")

    if any(a in {"Lentilles", "Pois chiches", "Saumon", "Dattes"} for a in selection):
        score -= 0.5
        remarques.append("‚ö†Ô∏è Aliments mod√©r√©ment riches en purines pr√©sents.")

    if any(a in {"Avocat", "Amandes", "Graines de courge"} for a in selection):
        score += 1
        remarques.append("‚úî Bons lipides anti-inflammatoires pr√©sents.")

    if any(a in {"√âpinards", "Fenouil", "Concombres", "Betteraves", "Courgettes"} for a in selection):
        score += 1
        remarques.append("‚úî Aliments alcalins bons pour les reins.")

    if any(a in {"Cerises", "Myrtilles", "Poire", "Pomme"} for a in selection):
        score += 1
        remarques.append("‚úî Fruits riches en antioxydants pr√©sents.")

    if score >= 3.5:
        conclusion = "‚úÖ Repas √©quilibr√© et adapt√© √† ton profil."
    elif 2 <= score < 3.5:
        conclusion = "üü° Repas correct, quelques ajustements possibles."
    else:
        conclusion = "üî¥ Repas √† mod√©rer selon tes objectifs sant√©."

    return conclusion, remarques

if selection:
    conclusion, remarques = analyse(selection)
    st.subheader("üßæ Conclusion :")
    st.success(conclusion)

    st.subheader("üîç D√©tails :")
    for r in remarques:
        st.markdown(f"- {r}")
else:
    st.info("üëâ S√©lectionne ou d√©tecte des aliments pour afficher l‚Äôanalyse.")
